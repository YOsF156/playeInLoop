{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozi38\\\\Downloads\\\\2syzgn\\\\src\\\\components\\\\LoadButton.component.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect } from \"react\";\nimport { usePlayer } from \"../Player.context\";\nimport styles from \"./LoadButton.module.css\";\nimport sample from \"../assets/wush_10.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadButton = () => {\n  _s();\n  const {\n    loadFile\n  } = usePlayer();\n  const onChange = _ref => {\n    let {\n      target: {\n        files: [file],\n        value\n      }\n    } = _ref;\n    const fileTest = /(.mp3)$/i.test(value);\n    if (fileTest) {\n      loadFile(file);\n    } else {\n      window.alert(\"you can only load an mp3 file\");\n    }\n  };\n  // const handleLoad = (fileBlob) => {\n  //   console.log(\"ðŸš€ ~ handleLoad ~ fileBlob:\", fileBlob)\n  //   loadFile(fileBlob)\n  // }\n  // useEffect(() => {\n  //   // Function to fetch and read the audio file\n  //   const loadAudioFile = async () => {\n  //     try {\n  //       // Fetch the audio file from the public URL\n  //       const response = await fetch(process.env.PUBLIC_URL + '/assets/wush_10.mp3');\n  //       handleLoad(process.env.PUBLIC_URL + '/assets/wush_10.mp3')\n  //       // Check if the response is okay\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok ' + response.statusText);\n  //       }\n\n  //       // Convert the response to a Blob\n  //       const audioBlob = await response.blob();\n\n  //       // Create a FileReader to read the Blob\n  //       const reader = new FileReader();\n\n  //       // Define what happens when the FileReader finishes reading\n  //       reader.onloadend = () => {\n  //         const arrayBuffer = reader.result;\n\n  //         console.log('ArrayBuffer:', arrayBuffer);\n  //         // You can now use the ArrayBuffer (e.g., for audio processing)\n  //       };\n\n  //       // Read the Blob as an ArrayBuffer\n  //       reader.readAsArrayBuffer(audioBlob);\n  //     } catch (error) {\n  //       console.error('Error loading audio file:', error);\n  //     }\n  //   };\n\n  //   // Call the function to load the audio file\n  //   loadAudioFile();\n  // }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"fileBtn\",\n      children: [\"s\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"fileField\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), \" \", \"Load MP3\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(LoadButton, \"elhsmJvVdG20GjBNx3QlLvi7wa8=\", false, function () {\n  return [usePlayer];\n});\n_c = LoadButton;\nexport default LoadButton;\nvar _c;\n$RefreshReg$(_c, \"LoadButton\");","map":{"version":3,"names":["React","Fragment","useEffect","usePlayer","styles","sample","jsxDEV","_jsxDEV","LoadButton","_s","loadFile","onChange","_ref","target","files","file","value","fileTest","test","window","alert","children","className","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ozi38/Downloads/2syzgn/src/components/LoadButton.component.js"],"sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { usePlayer } from \"../Player.context\";\nimport styles from \"./LoadButton.module.css\";\nimport sample from \"../assets/wush_10.mp3\";\nconst LoadButton = () => {\n  const { loadFile } = usePlayer();\n  const onChange = ({\n    target: {\n      files: [file],\n      value\n    }\n  }) => {\n    const fileTest = /(.mp3)$/i.test(value);\n    if (fileTest) {\n      loadFile(file);\n    } else {\n      window.alert(\"you can only load an mp3 file\");\n    }\n  };\n  // const handleLoad = (fileBlob) => {\n  //   console.log(\"ðŸš€ ~ handleLoad ~ fileBlob:\", fileBlob)\n  //   loadFile(fileBlob)\n  // }\n  // useEffect(() => {\n  //   // Function to fetch and read the audio file\n  //   const loadAudioFile = async () => {\n  //     try {\n  //       // Fetch the audio file from the public URL\n  //       const response = await fetch(process.env.PUBLIC_URL + '/assets/wush_10.mp3');\n  //       handleLoad(process.env.PUBLIC_URL + '/assets/wush_10.mp3')\n  //       // Check if the response is okay\n  //       if (!response.ok) {\n  //         throw new Error('Network response was not ok ' + response.statusText);\n  //       }\n\n  //       // Convert the response to a Blob\n  //       const audioBlob = await response.blob();\n\n  //       // Create a FileReader to read the Blob\n  //       const reader = new FileReader();\n\n  //       // Define what happens when the FileReader finishes reading\n  //       reader.onloadend = () => {\n  //         const arrayBuffer = reader.result;\n\n  //         console.log('ArrayBuffer:', arrayBuffer);\n  //         // You can now use the ArrayBuffer (e.g., for audio processing)\n  //       };\n\n  //       // Read the Blob as an ArrayBuffer\n  //       reader.readAsArrayBuffer(audioBlob);\n  //     } catch (error) {\n  //       console.error('Error loading audio file:', error);\n  //     }\n  //   };\n\n  //   // Call the function to load the audio file\n  //   loadAudioFile();\n  // }, []);\n  return (\n    <Fragment>\n      <label className={\"fileBtn\"}>\n        s\n        <input type=\"file\" className={\"fileField\"} onChange={onChange} />{\" \"}\n        Load MP3\n      </label>\n    </Fragment>\n  );\n};\n\nexport default LoadButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,MAAM,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC3C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAS,CAAC,GAAGP,SAAS,CAAC,CAAC;EAChC,MAAMQ,QAAQ,GAAGC,IAAA,IAKX;IAAA,IALY;MAChBC,MAAM,EAAE;QACNC,KAAK,EAAE,CAACC,IAAI,CAAC;QACbC;MACF;IACF,CAAC,GAAAJ,IAAA;IACC,MAAMK,QAAQ,GAAG,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;IACvC,IAAIC,QAAQ,EAAE;MACZP,QAAQ,CAACK,IAAI,CAAC;IAChB,CAAC,MAAM;MACLI,MAAM,CAACC,KAAK,CAAC,+BAA+B,CAAC;IAC/C;EACF,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA,oBACEb,OAAA,CAACN,QAAQ;IAAAoB,QAAA,eACPd,OAAA;MAAOe,SAAS,EAAE,SAAU;MAAAD,QAAA,GAAC,GAE3B,eAAAd,OAAA;QAAOgB,IAAI,EAAC,MAAM;QAACD,SAAS,EAAE,WAAY;QAACX,QAAQ,EAAEA;MAAS;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAC,GAAG,EAAC,UAExE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf,CAAC;AAAClB,EAAA,CAhEID,UAAU;EAAA,QACOL,SAAS;AAAA;AAAAyB,EAAA,GAD1BpB,UAAU;AAkEhB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}