{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozi38\\\\Downloads\\\\2syzgn\\\\src\\\\Player.context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useMemo, useState, useContext, useEffect } from \"react\";\nimport { PitchShifter } from \"soundtouchjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlayerContext = /*#__PURE__*/createContext();\nexport const PlayerProvider = _ref => {\n  _s();\n  let {\n    audioCtx,\n    gainNode,\n    ...props\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [tempo, setTempo] = useState(1.0);\n  const [pitch, setPitch] = useState(1.0);\n  const [semitone, setSemitone] = useState(0);\n  const [volume, setVolume] = useState(1.0);\n  const [playHead, setPlayHead] = useState(\"0:00\");\n  const [duration, setDuration] = useState(\"0:00\");\n  const [progress, setProgress] = useState(0);\n  const [shifter, setShifter] = useState();\n  const [finishToPlay, setFinishToPlay] = useState(false);\n  const [audioComplete, setAudioComplete] = useState(false); // New state for audioComplete\n\n  const value = useMemo(() => ({\n    loading,\n    setLoading,\n    playing,\n    setPlaying,\n    tempo,\n    setTempo,\n    pitch,\n    setPitch,\n    semitone,\n    setSemitone,\n    volume,\n    setVolume,\n    playHead,\n    setPlayHead,\n    duration,\n    setDuration,\n    progress,\n    setProgress,\n    audioCtx,\n    gainNode,\n    shifter,\n    setShifter,\n    finishToPlay,\n    setFinishToPlay,\n    audioComplete,\n    // Include audioComplete in the context value\n    setAudioComplete // Include the setter for audioComplete\n  }), [loading, setLoading, playing, setPlaying, tempo, setTempo, pitch, setPitch, semitone, setSemitone, volume, setVolume, playHead, setPlayHead, duration, setDuration, progress, setProgress, audioCtx, gainNode, shifter, setShifter, finishToPlay, setFinishToPlay, audioComplete, setAudioComplete]);\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 10\n  }, this);\n};\n_s(PlayerProvider, \"/VIU0AeEniGL7xoUXpDDH7GIW+c=\");\n_c = PlayerProvider;\nexport const usePlayer = () => {\n  _s2();\n  const {\n    loading,\n    setLoading,\n    playing,\n    setPlaying,\n    tempo,\n    setTempo,\n    pitch,\n    setPitch,\n    semitone,\n    setSemitone,\n    volume,\n    setVolume,\n    playHead,\n    setPlayHead,\n    duration,\n    setDuration,\n    progress,\n    setProgress,\n    audioCtx,\n    gainNode,\n    shifter,\n    setShifter,\n    finishToPlay,\n    setFinishToPlay,\n    audioComplete,\n    setAudioComplete // Retrieve the audioComplete state and setter\n  } = useContext(PlayerContext);\n  const onPlay = _ref2 => {\n    let {\n      formattedTimePlayed,\n      percentagePlayed\n    } = _ref2;\n    setPlayHead(formattedTimePlayed);\n    setProgress(percentagePlayed);\n    if (percentagePlayed > 90) {\n      setFinishToPlay(true);\n    } else {\n      setFinishToPlay(false);\n    }\n  };\n  const newShifter = buffer => {\n    const myShifter = new PitchShifter(audioCtx, buffer, 256, onPause);\n    myShifter.tempo = tempo;\n    myShifter.pitch = pitch;\n    myShifter.on(\"play\", onPlay);\n    myShifter._node.onaudioprocess = function (event) {\n      console.log(\"ðŸš€ ~ newShifter ~ event:\", event);\n      let left = event.outputBuffer.getChannelData(0);\n      let right = event.outputBuffer.getChannelData(1);\n      let remainingFrames = audioBuffer.length - pitchShifter._filter.sourcePosition;\n      let framesToProcess = Math.min(bufferSize, remainingFrames);\n\n      // Extract frames to process\n      let framesExtracted = pitchShifter._filter.extract(new Float32Array(bufferSize * 2), framesToProcess);\n\n      // If we've reached the end of the buffer\n      if (framesExtracted < bufferSize) {\n        for (let i = 0; i < framesExtracted; i++) {\n          left[i] = pitchShifter._filter.outputBuffer.vector[i * 2];\n          right[i] = pitchShifter._filter.outputBuffer.vector[i * 2 + 1];\n        }\n        onEnd(); // Trigger the end of playback\n      } else {\n        for (let i = 0; i < bufferSize; i++) {\n          left[i] = pitchShifter._filter.outputBuffer.vector[i * 2];\n          right[i] = pitchShifter._filter.outputBuffer.vector[i * 2 + 1];\n        }\n      }\n    };\n    setDuration(myShifter.formattedDuration);\n    setShifter(myShifter);\n  };\n  const onPause = () => {\n    console.log(\"ðŸš€ ~ onPause ~ onPause:\", onPause);\n    if (!audioComplete) setAudioComplete(true); // Use the state setter to update audioComplete\n  };\n  const onLoad = _ref3 => {\n    let {\n      target: {\n        result: buffer\n      }\n    } = _ref3;\n    if (shifter) {\n      shifter.off();\n    }\n    if (buffer) {\n      audioCtx.decodeAudioData(buffer).then(audioBuffer => {\n        newShifter(audioBuffer);\n      });\n    }\n    setLoading(false);\n  };\n  const loadFile = file => {\n    setLoading(true);\n    const fileReader = new FileReader();\n    fileReader.onload = onLoad;\n    try {\n      fileReader.readAsArrayBuffer(file);\n    } catch (err) {\n      alert(err);\n    }\n  };\n  const playAudio = () => {\n    if (shifter) {\n      // fireInterval();\n      setPlaying(true);\n      shifter.connect(gainNode);\n      gainNode.connect(audioCtx.destination);\n      audioCtx.resume();\n    }\n  };\n  let interval1 = null;\n  const fireInterval = () => {\n    // if (!interval1) {\n    //   interval1 = setInterval(() => {\n    //     console.log(\"ðŸš€  interval1=setInterval  shifter:\", shifter);\n    //     console.log(\"ðŸš€  interval1=setInterval  shifter:\", shifter.percentagePlayed);\n    //     console.log(\"ðŸš€ ~ interval1=setInterval ~ audioComplete:\", audioComplete)\n    //     if (audioComplete) {\n    //       setAudioComplete(false); // Reset the state instead of the local variable\n    //       shifter.percentagePlayed = 0;\n    //       //clearInterval(interval1)\n    //     }\n    //   }, 20);\n    // }\n  };\n  useEffect(() => {\n    if (shifter && shifter.percentagePlayed == 100) {\n      shifter.percentagePlayed = 0.00;\n      setAudioComplete(false);\n    }\n  }, [audioComplete]);\n  // useEffect(() => {\n  //   console.log(\"ðŸš€ ~ useEffect ~ shifter.percentagePlayed:\", shifter?.percentagePlayed)\n  //   if (shifter && shifter.percentagePlay >= 96) {\n  //     console.log(shifter)\n  //     shifter.percentagePlayed = 0.50;\n  //   }\n  // }, [progress])\n  const pauseAudio = function () {\n    let isPlaying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (shifter) {\n      setProgress(0);\n      shifter.disconnect();\n      !isPlaying && setPlaying(false);\n    }\n  };\n  const resetPlayHead = perc => {\n    //pauseAudio(playing);\n    if (shifter) {\n      shifter.percentagePlayed = perc;\n      //setPlayHead(shifter.timePlayed);\n    }\n    setProgress(100 * perc);\n    if (playing) {\n      playAudio();\n    }\n  };\n  return {\n    loading,\n    playing,\n    duration,\n    tempo,\n    pitch,\n    semitone,\n    volume,\n    playHead,\n    progress,\n    loadFile,\n    play: playAudio,\n    pause: pauseAudio,\n    changeVolume: _ref4 => {\n      let {\n        target: {\n          value\n        }\n      } = _ref4;\n      setVolume(value);\n      gainNode.gain.volume = value;\n    },\n    changeSemitone: _ref5 => {\n      let {\n        target: {\n          value\n        }\n      } = _ref5;\n      setSemitone(value);\n      if (shifter) {\n        shifter.pitchSemitones = value;\n      }\n    },\n    changePitch: _ref6 => {\n      let {\n        target: {\n          value\n        }\n      } = _ref6;\n      setPitch(value);\n      if (shifter) {\n        shifter.pitch = value;\n      }\n    },\n    changeTempo: _ref7 => {\n      let {\n        target: {\n          value\n        }\n      } = _ref7;\n      setTempo(value);\n      if (shifter) {\n        shifter.tempo = value;\n      }\n    },\n    resetPlayHead,\n    shifter\n  };\n};\n_s2(usePlayer, \"66YJnSnn6jMtEN6hpPLeFjoljaA=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useMemo","useState","useContext","useEffect","PitchShifter","jsxDEV","_jsxDEV","PlayerContext","PlayerProvider","_ref","_s","audioCtx","gainNode","props","loading","setLoading","playing","setPlaying","tempo","setTempo","pitch","setPitch","semitone","setSemitone","volume","setVolume","playHead","setPlayHead","duration","setDuration","progress","setProgress","shifter","setShifter","finishToPlay","setFinishToPlay","audioComplete","setAudioComplete","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayer","_s2","onPlay","_ref2","formattedTimePlayed","percentagePlayed","newShifter","buffer","myShifter","onPause","on","_node","onaudioprocess","event","console","log","left","outputBuffer","getChannelData","right","remainingFrames","audioBuffer","length","pitchShifter","_filter","sourcePosition","framesToProcess","Math","min","bufferSize","framesExtracted","extract","Float32Array","i","vector","onEnd","formattedDuration","onLoad","_ref3","target","result","off","decodeAudioData","then","loadFile","file","fileReader","FileReader","onload","readAsArrayBuffer","err","alert","playAudio","connect","destination","resume","interval1","fireInterval","pauseAudio","isPlaying","arguments","undefined","disconnect","resetPlayHead","perc","play","pause","changeVolume","_ref4","gain","changeSemitone","_ref5","pitchSemitones","changePitch","_ref6","changeTempo","_ref7","$RefreshReg$"],"sources":["C:/Users/ozi38/Downloads/2syzgn/src/Player.context.js"],"sourcesContent":["import React, { createContext, useMemo, useState, useContext, useEffect } from \"react\";\nimport { PitchShifter } from \"soundtouchjs\";\n\nexport const PlayerContext = createContext();\n\nexport const PlayerProvider = ({ audioCtx, gainNode, ...props }) => {\n  const [loading, setLoading] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [tempo, setTempo] = useState(1.0);\n  const [pitch, setPitch] = useState(1.0);\n  const [semitone, setSemitone] = useState(0);\n  const [volume, setVolume] = useState(1.0);\n  const [playHead, setPlayHead] = useState(\"0:00\");\n  const [duration, setDuration] = useState(\"0:00\");\n  const [progress, setProgress] = useState(0);\n  const [shifter, setShifter] = useState();\n  const [finishToPlay, setFinishToPlay] = useState(false);\n  const [audioComplete, setAudioComplete] = useState(false); // New state for audioComplete\n\n  const value = useMemo(\n    () => ({\n      loading,\n      setLoading,\n      playing,\n      setPlaying,\n      tempo,\n      setTempo,\n      pitch,\n      setPitch,\n      semitone,\n      setSemitone,\n      volume,\n      setVolume,\n      playHead,\n      setPlayHead,\n      duration,\n      setDuration,\n      progress,\n      setProgress,\n      audioCtx,\n      gainNode,\n      shifter,\n      setShifter,\n      finishToPlay,\n      setFinishToPlay,\n      audioComplete, // Include audioComplete in the context value\n      setAudioComplete // Include the setter for audioComplete\n    }),\n    [\n      loading,\n      setLoading,\n      playing,\n      setPlaying,\n      tempo,\n      setTempo,\n      pitch,\n      setPitch,\n      semitone,\n      setSemitone,\n      volume,\n      setVolume,\n      playHead,\n      setPlayHead,\n      duration,\n      setDuration,\n      progress,\n      setProgress,\n      audioCtx,\n      gainNode,\n      shifter,\n      setShifter,\n      finishToPlay,\n      setFinishToPlay,\n      audioComplete,\n      setAudioComplete\n    ]\n  );\n\n  return <PlayerContext.Provider value={value} {...props} />;\n};\n\nexport const usePlayer = () => {\n  const {\n    loading,\n    setLoading,\n    playing,\n    setPlaying,\n    tempo,\n    setTempo,\n    pitch,\n    setPitch,\n    semitone,\n    setSemitone,\n    volume,\n    setVolume,\n    playHead,\n    setPlayHead,\n    duration,\n    setDuration,\n    progress,\n    setProgress,\n    audioCtx,\n    gainNode,\n    shifter,\n    setShifter,\n    finishToPlay,\n    setFinishToPlay,\n    audioComplete,\n    setAudioComplete // Retrieve the audioComplete state and setter\n  } = useContext(PlayerContext);\n\n  const onPlay = ({ formattedTimePlayed, percentagePlayed }) => {\n    setPlayHead(formattedTimePlayed);\n    setProgress(percentagePlayed);\n\n    if (percentagePlayed > 90) {\n      setFinishToPlay(true);\n    } else {\n      setFinishToPlay(false);\n    }\n  };\n\n  const newShifter = buffer => {\n    const myShifter = new PitchShifter(audioCtx, buffer, 256, onPause);\n    myShifter.tempo = tempo;\n    myShifter.pitch = pitch;\n    myShifter.on(\"play\", onPlay);\n    myShifter._node.onaudioprocess = function (event) {\n      console.log(\"ðŸš€ ~ newShifter ~ event:\", event)\n      let left = event.outputBuffer.getChannelData(0);\n      let right = event.outputBuffer.getChannelData(1);\n      let remainingFrames = audioBuffer.length - pitchShifter._filter.sourcePosition;\n      let framesToProcess = Math.min(bufferSize, remainingFrames);\n\n      // Extract frames to process\n      let framesExtracted = pitchShifter._filter.extract(new Float32Array(bufferSize * 2), framesToProcess);\n\n      // If we've reached the end of the buffer\n      if (framesExtracted < bufferSize) {\n        for (let i = 0; i < framesExtracted; i++) {\n          left[i] = pitchShifter._filter.outputBuffer.vector[i * 2];\n          right[i] = pitchShifter._filter.outputBuffer.vector[i * 2 + 1];\n        }\n        onEnd(); // Trigger the end of playback\n      } else {\n        for (let i = 0; i < bufferSize; i++) {\n          left[i] = pitchShifter._filter.outputBuffer.vector[i * 2];\n          right[i] = pitchShifter._filter.outputBuffer.vector[i * 2 + 1];\n        }\n      }\n    };\n    setDuration(myShifter.formattedDuration);\n    setShifter(myShifter);\n  };\n  const onPause = () => {\n\n    console.log(\"ðŸš€ ~ onPause ~ onPause:\", onPause)\n    if (!audioComplete)\n      setAudioComplete(true); // Use the state setter to update audioComplete\n  };\n\n  const onLoad = ({ target: { result: buffer } }) => {\n    if (shifter) {\n      shifter.off();\n    }\n    if (buffer) {\n      audioCtx.decodeAudioData(buffer).then(audioBuffer => {\n        newShifter(audioBuffer);\n      });\n    }\n    setLoading(false);\n  };\n\n  const loadFile = file => {\n    setLoading(true);\n    const fileReader = new FileReader();\n    fileReader.onload = onLoad;\n    try {\n      fileReader.readAsArrayBuffer(file);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const playAudio = () => {\n    if (shifter) {\n      // fireInterval();\n      setPlaying(true);\n      shifter.connect(gainNode);\n      gainNode.connect(audioCtx.destination);\n      audioCtx.resume();\n    }\n  };\n\n  let interval1 = null;\n  const fireInterval = () => {\n    // if (!interval1) {\n    //   interval1 = setInterval(() => {\n    //     console.log(\"ðŸš€  interval1=setInterval  shifter:\", shifter);\n    //     console.log(\"ðŸš€  interval1=setInterval  shifter:\", shifter.percentagePlayed);\n    //     console.log(\"ðŸš€ ~ interval1=setInterval ~ audioComplete:\", audioComplete)\n    //     if (audioComplete) {\n    //       setAudioComplete(false); // Reset the state instead of the local variable\n    //       shifter.percentagePlayed = 0;\n    //       //clearInterval(interval1)\n    //     }\n    //   }, 20);\n    // }\n  };\n  useEffect(() => {\n    if (shifter && shifter.percentagePlayed == 100) {\n      shifter.percentagePlayed = 0.00;\n      setAudioComplete(false)\n    }\n  }, [audioComplete])\n  // useEffect(() => {\n  //   console.log(\"ðŸš€ ~ useEffect ~ shifter.percentagePlayed:\", shifter?.percentagePlayed)\n  //   if (shifter && shifter.percentagePlay >= 96) {\n  //     console.log(shifter)\n  //     shifter.percentagePlayed = 0.50;\n  //   }\n  // }, [progress])\n  const pauseAudio = (isPlaying = false) => {\n    if (shifter) {\n      setProgress(0);\n      shifter.disconnect();\n      !isPlaying && setPlaying(false);\n    }\n  };\n\n  const resetPlayHead = perc => {\n    //pauseAudio(playing);\n    if (shifter) {\n      shifter.percentagePlayed = perc;\n      //setPlayHead(shifter.timePlayed);\n    }\n    setProgress(100 * perc);\n    if (playing) {\n      playAudio();\n    }\n  };\n\n  return {\n    loading,\n    playing,\n    duration,\n    tempo,\n    pitch,\n    semitone,\n    volume,\n    playHead,\n    progress,\n    loadFile,\n    play: playAudio,\n    pause: pauseAudio,\n    changeVolume: ({ target: { value } }) => {\n      setVolume(value);\n      gainNode.gain.volume = value;\n    },\n    changeSemitone: ({ target: { value } }) => {\n      setSemitone(value);\n      if (shifter) {\n        shifter.pitchSemitones = value;\n      }\n    },\n    changePitch: ({ target: { value } }) => {\n      setPitch(value);\n      if (shifter) {\n        shifter.pitch = value;\n      }\n    },\n    changeTempo: ({ target: { value } }) => {\n      setTempo(value);\n      if (shifter) {\n        shifter.tempo = value;\n      }\n    },\n    resetPlayHead,\n    shifter\n  };\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACtF,SAASC,YAAY,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAAC,CAAC;AAE5C,OAAO,MAAMS,cAAc,GAAGC,IAAA,IAAsC;EAAAC,EAAA;EAAA,IAArC;IAAEC,QAAQ;IAAEC,QAAQ;IAAE,GAAGC;EAAM,CAAC,GAAAJ,IAAA;EAC7D,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,GAAG,CAAC;EACvC,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,GAAG,CAAC;EACvC,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACuB,MAAM,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,GAAG,CAAC;EACzC,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,MAAM,CAAC;EAChD,MAAM,CAAC2B,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,MAAM,CAAC;EAChD,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAAC+B,OAAO,EAAEC,UAAU,CAAC,GAAGhC,QAAQ,CAAC,CAAC;EACxC,MAAM,CAACiC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE3D,MAAMqC,KAAK,GAAGtC,OAAO,CACnB,OAAO;IACLc,OAAO;IACPC,UAAU;IACVC,OAAO;IACPC,UAAU;IACVC,KAAK;IACLC,QAAQ;IACRC,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRC,WAAW;IACXC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,WAAW;IACXC,QAAQ;IACRC,WAAW;IACXC,QAAQ;IACRC,WAAW;IACXpB,QAAQ;IACRC,QAAQ;IACRoB,OAAO;IACPC,UAAU;IACVC,YAAY;IACZC,eAAe;IACfC,aAAa;IAAE;IACfC,gBAAgB,CAAC;EACnB,CAAC,CAAC,EACF,CACEvB,OAAO,EACPC,UAAU,EACVC,OAAO,EACPC,UAAU,EACVC,KAAK,EACLC,QAAQ,EACRC,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,MAAM,EACNC,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXpB,QAAQ,EACRC,QAAQ,EACRoB,OAAO,EACPC,UAAU,EACVC,YAAY,EACZC,eAAe,EACfC,aAAa,EACbC,gBAAgB,CAEpB,CAAC;EAED,oBAAO/B,OAAA,CAACC,aAAa,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA,GAAKzB;EAAK;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAC5D,CAAC;AAACjC,EAAA,CA1EWF,cAAc;AAAAoC,EAAA,GAAdpC,cAAc;AA4E3B,OAAO,MAAMqC,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAM;IACJhC,OAAO;IACPC,UAAU;IACVC,OAAO;IACPC,UAAU;IACVC,KAAK;IACLC,QAAQ;IACRC,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRC,WAAW;IACXC,MAAM;IACNC,SAAS;IACTC,QAAQ;IACRC,WAAW;IACXC,QAAQ;IACRC,WAAW;IACXC,QAAQ;IACRC,WAAW;IACXpB,QAAQ;IACRC,QAAQ;IACRoB,OAAO;IACPC,UAAU;IACVC,YAAY;IACZC,eAAe;IACfC,aAAa;IACbC,gBAAgB,CAAC;EACnB,CAAC,GAAGnC,UAAU,CAACK,aAAa,CAAC;EAE7B,MAAMwC,MAAM,GAAGC,KAAA,IAA+C;IAAA,IAA9C;MAAEC,mBAAmB;MAAEC;IAAiB,CAAC,GAAAF,KAAA;IACvDrB,WAAW,CAACsB,mBAAmB,CAAC;IAChClB,WAAW,CAACmB,gBAAgB,CAAC;IAE7B,IAAIA,gBAAgB,GAAG,EAAE,EAAE;MACzBf,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACLA,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,MAAMgB,UAAU,GAAGC,MAAM,IAAI;IAC3B,MAAMC,SAAS,GAAG,IAAIjD,YAAY,CAACO,QAAQ,EAAEyC,MAAM,EAAE,GAAG,EAAEE,OAAO,CAAC;IAClED,SAAS,CAACnC,KAAK,GAAGA,KAAK;IACvBmC,SAAS,CAACjC,KAAK,GAAGA,KAAK;IACvBiC,SAAS,CAACE,EAAE,CAAC,MAAM,EAAER,MAAM,CAAC;IAC5BM,SAAS,CAACG,KAAK,CAACC,cAAc,GAAG,UAAUC,KAAK,EAAE;MAChDC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,KAAK,CAAC;MAC9C,IAAIG,IAAI,GAAGH,KAAK,CAACI,YAAY,CAACC,cAAc,CAAC,CAAC,CAAC;MAC/C,IAAIC,KAAK,GAAGN,KAAK,CAACI,YAAY,CAACC,cAAc,CAAC,CAAC,CAAC;MAChD,IAAIE,eAAe,GAAGC,WAAW,CAACC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACC,cAAc;MAC9E,IAAIC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAACC,UAAU,EAAET,eAAe,CAAC;;MAE3D;MACA,IAAIU,eAAe,GAAGP,YAAY,CAACC,OAAO,CAACO,OAAO,CAAC,IAAIC,YAAY,CAACH,UAAU,GAAG,CAAC,CAAC,EAAEH,eAAe,CAAC;;MAErG;MACA,IAAII,eAAe,GAAGD,UAAU,EAAE;QAChC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,eAAe,EAAEG,CAAC,EAAE,EAAE;UACxCjB,IAAI,CAACiB,CAAC,CAAC,GAAGV,YAAY,CAACC,OAAO,CAACP,YAAY,CAACiB,MAAM,CAACD,CAAC,GAAG,CAAC,CAAC;UACzDd,KAAK,CAACc,CAAC,CAAC,GAAGV,YAAY,CAACC,OAAO,CAACP,YAAY,CAACiB,MAAM,CAACD,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAChE;QACAE,KAAK,CAAC,CAAC,CAAC,CAAC;MACX,CAAC,MAAM;QACL,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;UACnCjB,IAAI,CAACiB,CAAC,CAAC,GAAGV,YAAY,CAACC,OAAO,CAACP,YAAY,CAACiB,MAAM,CAACD,CAAC,GAAG,CAAC,CAAC;UACzDd,KAAK,CAACc,CAAC,CAAC,GAAGV,YAAY,CAACC,OAAO,CAACP,YAAY,CAACiB,MAAM,CAACD,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAChE;MACF;IACF,CAAC;IACDjD,WAAW,CAACwB,SAAS,CAAC4B,iBAAiB,CAAC;IACxChD,UAAU,CAACoB,SAAS,CAAC;EACvB,CAAC;EACD,MAAMC,OAAO,GAAGA,CAAA,KAAM;IAEpBK,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEN,OAAO,CAAC;IAC/C,IAAI,CAAClB,aAAa,EAChBC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,MAAM6C,MAAM,GAAGC,KAAA,IAAoC;IAAA,IAAnC;MAAEC,MAAM,EAAE;QAAEC,MAAM,EAAEjC;MAAO;IAAE,CAAC,GAAA+B,KAAA;IAC5C,IAAInD,OAAO,EAAE;MACXA,OAAO,CAACsD,GAAG,CAAC,CAAC;IACf;IACA,IAAIlC,MAAM,EAAE;MACVzC,QAAQ,CAAC4E,eAAe,CAACnC,MAAM,CAAC,CAACoC,IAAI,CAACtB,WAAW,IAAI;QACnDf,UAAU,CAACe,WAAW,CAAC;MACzB,CAAC,CAAC;IACJ;IACAnD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAM0E,QAAQ,GAAGC,IAAI,IAAI;IACvB3E,UAAU,CAAC,IAAI,CAAC;IAChB,MAAM4E,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;IACnCD,UAAU,CAACE,MAAM,GAAGX,MAAM;IAC1B,IAAI;MACFS,UAAU,CAACG,iBAAiB,CAACJ,IAAI,CAAC;IACpC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZC,KAAK,CAACD,GAAG,CAAC;IACZ;EACF,CAAC;EAED,MAAME,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIjE,OAAO,EAAE;MACX;MACAf,UAAU,CAAC,IAAI,CAAC;MAChBe,OAAO,CAACkE,OAAO,CAACtF,QAAQ,CAAC;MACzBA,QAAQ,CAACsF,OAAO,CAACvF,QAAQ,CAACwF,WAAW,CAAC;MACtCxF,QAAQ,CAACyF,MAAM,CAAC,CAAC;IACnB;EACF,CAAC;EAED,IAAIC,SAAS,GAAG,IAAI;EACpB,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EACDnG,SAAS,CAAC,MAAM;IACd,IAAI6B,OAAO,IAAIA,OAAO,CAACkB,gBAAgB,IAAI,GAAG,EAAE;MAC9ClB,OAAO,CAACkB,gBAAgB,GAAG,IAAI;MAC/Bb,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC,EAAE,CAACD,aAAa,CAAC,CAAC;EACnB;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMmE,UAAU,GAAG,SAAAA,CAAA,EAAuB;IAAA,IAAtBC,SAAS,GAAAC,SAAA,CAAAtC,MAAA,QAAAsC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;IACnC,IAAIzE,OAAO,EAAE;MACXD,WAAW,CAAC,CAAC,CAAC;MACdC,OAAO,CAAC2E,UAAU,CAAC,CAAC;MACpB,CAACH,SAAS,IAAIvF,UAAU,CAAC,KAAK,CAAC;IACjC;EACF,CAAC;EAED,MAAM2F,aAAa,GAAGC,IAAI,IAAI;IAC5B;IACA,IAAI7E,OAAO,EAAE;MACXA,OAAO,CAACkB,gBAAgB,GAAG2D,IAAI;MAC/B;IACF;IACA9E,WAAW,CAAC,GAAG,GAAG8E,IAAI,CAAC;IACvB,IAAI7F,OAAO,EAAE;MACXiF,SAAS,CAAC,CAAC;IACb;EACF,CAAC;EAED,OAAO;IACLnF,OAAO;IACPE,OAAO;IACPY,QAAQ;IACRV,KAAK;IACLE,KAAK;IACLE,QAAQ;IACRE,MAAM;IACNE,QAAQ;IACRI,QAAQ;IACR2D,QAAQ;IACRqB,IAAI,EAAEb,SAAS;IACfc,KAAK,EAAER,UAAU;IACjBS,YAAY,EAAEC,KAAA,IAA2B;MAAA,IAA1B;QAAE7B,MAAM,EAAE;UAAE9C;QAAM;MAAE,CAAC,GAAA2E,KAAA;MAClCxF,SAAS,CAACa,KAAK,CAAC;MAChB1B,QAAQ,CAACsG,IAAI,CAAC1F,MAAM,GAAGc,KAAK;IAC9B,CAAC;IACD6E,cAAc,EAAEC,KAAA,IAA2B;MAAA,IAA1B;QAAEhC,MAAM,EAAE;UAAE9C;QAAM;MAAE,CAAC,GAAA8E,KAAA;MACpC7F,WAAW,CAACe,KAAK,CAAC;MAClB,IAAIN,OAAO,EAAE;QACXA,OAAO,CAACqF,cAAc,GAAG/E,KAAK;MAChC;IACF,CAAC;IACDgF,WAAW,EAAEC,KAAA,IAA2B;MAAA,IAA1B;QAAEnC,MAAM,EAAE;UAAE9C;QAAM;MAAE,CAAC,GAAAiF,KAAA;MACjClG,QAAQ,CAACiB,KAAK,CAAC;MACf,IAAIN,OAAO,EAAE;QACXA,OAAO,CAACZ,KAAK,GAAGkB,KAAK;MACvB;IACF,CAAC;IACDkF,WAAW,EAAEC,KAAA,IAA2B;MAAA,IAA1B;QAAErC,MAAM,EAAE;UAAE9C;QAAM;MAAE,CAAC,GAAAmF,KAAA;MACjCtG,QAAQ,CAACmB,KAAK,CAAC;MACf,IAAIN,OAAO,EAAE;QACXA,OAAO,CAACd,KAAK,GAAGoB,KAAK;MACvB;IACF,CAAC;IACDsE,aAAa;IACb5E;EACF,CAAC;AACH,CAAC;AAACc,GAAA,CAvMWD,SAAS;AAAA,IAAAD,EAAA;AAAA8E,YAAA,CAAA9E,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}