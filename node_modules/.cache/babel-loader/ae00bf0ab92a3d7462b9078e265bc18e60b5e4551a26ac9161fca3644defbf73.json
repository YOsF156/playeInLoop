{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozi38\\\\Downloads\\\\2syzgn\\\\src\\\\Player.context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useMemo, useState, useContext } from \"react\";\nimport { PitchShifter } from \"soundtouchjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlayerContext = /*#__PURE__*/createContext();\nexport const PlayerProvider = _ref => {\n  _s();\n  let {\n    audioCtx,\n    gainNode,\n    ...props\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [tempo, setTempo] = useState(1.0);\n  const [pitch, setPitch] = useState(1.0);\n  const [semitone, setSemitone] = useState(0);\n  const [volume, setVolume] = useState(1.0);\n  const [playHead, setPlayHead] = useState(\"0:00\");\n  const [duration, setDuration] = useState(\"0:00\");\n  const [progress, setProgress] = useState(0);\n  const [shifter, setShifter] = useState();\n  const value = useMemo(() => ({\n    loading,\n    setLoading,\n    playing,\n    setPlaying,\n    tempo,\n    setTempo,\n    pitch,\n    setPitch,\n    semitone,\n    setSemitone,\n    volume,\n    setVolume,\n    playHead,\n    setPlayHead,\n    duration,\n    setDuration,\n    progress,\n    setProgress,\n    audioCtx,\n    gainNode,\n    shifter,\n    setShifter\n  }), [loading, setLoading, playing, setPlaying, tempo, setTempo, pitch, setPitch, semitone, setSemitone, volume, setVolume, playHead, setPlayHead, duration, setDuration, progress, setProgress, audioCtx, gainNode, shifter, setShifter]);\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n};\n_s(PlayerProvider, \"96qS02yfpi3Nz+El9f0RgmT1cQI=\");\n_c = PlayerProvider;\nexport const usePlayer = () => {\n  _s2();\n  const {\n    loading,\n    setLoading,\n    playing,\n    setPlaying,\n    tempo,\n    setTempo,\n    pitch,\n    setPitch,\n    semitone,\n    setSemitone,\n    volume,\n    setVolume,\n    playHead,\n    setPlayHead,\n    duration,\n    setDuration,\n    progress,\n    setProgress,\n    audioCtx,\n    gainNode,\n    shifter,\n    setShifter\n  } = useContext(PlayerContext);\n  const onPlay = _ref2 => {\n    let {\n      formattedTimePlayed,\n      percentagePlayed\n    } = _ref2;\n    setPlayHead(formattedTimePlayed);\n    setProgress(percentagePlayed);\n    if (percentagePlayed === 100) {\n      pauseAudio();\n    }\n  };\n  const newShifter = buffer => {\n    const myShifter = new PitchShifter(audioCtx, buffer, 16384);\n    myShifter.tempo = tempo;\n    myShifter.pitch = pitch;\n    myShifter.on(\"play\", onPlay);\n    setDuration(myShifter.formattedDuration);\n    setShifter(myShifter);\n  };\n  const onLoad = _ref3 => {\n    let {\n      target: {\n        result: buffer\n      }\n    } = _ref3;\n    if (shifter) {\n      shifter.off();\n    }\n    if (buffer) {\n      audioCtx.decodeAudioData(buffer).then(audioBuffer => {\n        newShifter(audioBuffer);\n      });\n    }\n    setLoading(false);\n  };\n  const loadFile = file => {\n    setLoading(true);\n    const fileReader = new FileReader();\n    fileReader.onload = onLoad;\n    try {\n      fileReader.readAsArrayBuffer(file);\n    } catch (err) {\n      alert(err);\n    }\n  };\n  const playAudio = () => {\n    if (shifter) {\n      shifter.connect(gainNode);\n      gainNode.connect(audioCtx.destination);\n      audioCtx.resume();\n    }\n  };\n  const pauseAudio = function () {\n    let isPlaying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (shifter) {\n      shifter.percentagePlayed = 0.00;\n      setProgress(0);\n      // shifter.disconnect();\n      !isPlaying && setPlaying(false);\n    }\n  };\n  const resetPlayHead = perc => {\n    pauseAudio(playing);\n    if (shifter) {\n      shifter.percentagePlayed = perc;\n      //setPlayHead(shifter.timePlayed);\n    }\n    setProgress(100 * perc);\n    if (playing) {\n      playAudio();\n    }\n  };\n  return {\n    loading,\n    playing,\n    duration,\n    tempo,\n    pitch,\n    semitone,\n    volume,\n    playHead,\n    progress,\n    loadFile,\n    play: playAudio,\n    pause: pauseAudio,\n    changeVolume: _ref4 => {\n      let {\n        target: {\n          value\n        }\n      } = _ref4;\n      setVolume(value);\n      gainNode.gain.volume = value;\n    },\n    changeSemitone: _ref5 => {\n      let {\n        target: {\n          value\n        }\n      } = _ref5;\n      setSemitone(value);\n      if (shifter) {\n        shifter.pitchSemitones = value;\n      }\n    },\n    changePitch: _ref6 => {\n      let {\n        target: {\n          value\n        }\n      } = _ref6;\n      setPitch(value);\n      if (shifter) {\n        shifter.pitch = value;\n      }\n    },\n    changeTempo: _ref7 => {\n      let {\n        target: {\n          value\n        }\n      } = _ref7;\n      setTempo(value);\n      if (shifter) {\n        shifter.tempo = value;\n      }\n    },\n    resetPlayHead,\n    shifter\n  };\n};\n_s2(usePlayer, \"jdx445NsV421tDvpDVqpk8yw/rM=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useMemo","useState","useContext","PitchShifter","jsxDEV","_jsxDEV","PlayerContext","PlayerProvider","_ref","_s","audioCtx","gainNode","props","loading","setLoading","playing","setPlaying","tempo","setTempo","pitch","setPitch","semitone","setSemitone","volume","setVolume","playHead","setPlayHead","duration","setDuration","progress","setProgress","shifter","setShifter","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayer","_s2","onPlay","_ref2","formattedTimePlayed","percentagePlayed","pauseAudio","newShifter","buffer","myShifter","on","formattedDuration","onLoad","_ref3","target","result","off","decodeAudioData","then","audioBuffer","loadFile","file","fileReader","FileReader","onload","readAsArrayBuffer","err","alert","playAudio","connect","destination","resume","isPlaying","arguments","length","undefined","resetPlayHead","perc","play","pause","changeVolume","_ref4","gain","changeSemitone","_ref5","pitchSemitones","changePitch","_ref6","changeTempo","_ref7","$RefreshReg$"],"sources":["C:/Users/ozi38/Downloads/2syzgn/src/Player.context.js"],"sourcesContent":["import React, { createContext, useMemo, useState, useContext } from \"react\";\nimport { PitchShifter } from \"soundtouchjs\";\n\nexport const PlayerContext = createContext();\n\nexport const PlayerProvider = ({ audioCtx, gainNode, ...props }) => {\n  const [loading, setLoading] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [tempo, setTempo] = useState(1.0);\n  const [pitch, setPitch] = useState(1.0);\n  const [semitone, setSemitone] = useState(0);\n  const [volume, setVolume] = useState(1.0);\n  const [playHead, setPlayHead] = useState(\"0:00\");\n  const [duration, setDuration] = useState(\"0:00\");\n  const [progress, setProgress] = useState(0);\n  const [shifter, setShifter] = useState();\n\n  const value = useMemo(\n    () => ({\n      loading,\n      setLoading,\n      playing,\n      setPlaying,\n      tempo,\n      setTempo,\n      pitch,\n      setPitch,\n      semitone,\n      setSemitone,\n      volume,\n      setVolume,\n      playHead,\n      setPlayHead,\n      duration,\n      setDuration,\n      progress,\n      setProgress,\n      audioCtx,\n      gainNode,\n      shifter,\n      setShifter\n    }),\n    [\n      loading,\n      setLoading,\n      playing,\n      setPlaying,\n      tempo,\n      setTempo,\n      pitch,\n      setPitch,\n      semitone,\n      setSemitone,\n      volume,\n      setVolume,\n      playHead,\n      setPlayHead,\n      duration,\n      setDuration,\n      progress,\n      setProgress,\n      audioCtx,\n      gainNode,\n      shifter,\n      setShifter\n    ]\n  );\n\n  return <PlayerContext.Provider value={value} {...props} />;\n};\n\nexport const usePlayer = () => {\n  const {\n    loading,\n    setLoading,\n    playing,\n    setPlaying,\n    tempo,\n    setTempo,\n    pitch,\n    setPitch,\n    semitone,\n    setSemitone,\n    volume,\n    setVolume,\n    playHead,\n    setPlayHead,\n    duration,\n    setDuration,\n    progress,\n    setProgress,\n    audioCtx,\n    gainNode,\n    shifter,\n    setShifter\n  } = useContext(PlayerContext);\n\n  const onPlay = ({ formattedTimePlayed, percentagePlayed }) => {\n    setPlayHead(formattedTimePlayed);\n    setProgress(percentagePlayed);\n    if (percentagePlayed === 100) {\n      pauseAudio();\n\n    }\n  };\n\n  const newShifter = buffer => {\n    const myShifter = new PitchShifter(audioCtx, buffer, 16384);\n    myShifter.tempo = tempo;\n    myShifter.pitch = pitch;\n    myShifter.on(\"play\", onPlay);\n    setDuration(myShifter.formattedDuration);\n    setShifter(myShifter);\n  };\n\n  const onLoad = ({ target: { result: buffer } }) => {\n    if (shifter) {\n      shifter.off();\n    }\n    if (buffer) {\n      audioCtx.decodeAudioData(buffer).then(audioBuffer => {\n        newShifter(audioBuffer);\n      });\n    }\n    setLoading(false);\n  };\n\n  const loadFile = file => {\n    setLoading(true);\n    const fileReader = new FileReader();\n    fileReader.onload = onLoad;\n    try {\n      fileReader.readAsArrayBuffer(file);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const playAudio = () => {\n    if (shifter) {\n      shifter.connect(gainNode);\n      gainNode.connect(audioCtx.destination);\n      audioCtx.resume();\n    }\n  };\n\n  const pauseAudio = (isPlaying = false) => {\n    if (shifter) {\n      shifter.percentagePlayed = 0.00;\n      setProgress(0)\n      // shifter.disconnect();\n      !isPlaying && setPlaying(false);\n    }\n  };\n\n  const resetPlayHead = perc => {\n    pauseAudio(playing);\n    if (shifter) {\n      shifter.percentagePlayed = perc;\n      //setPlayHead(shifter.timePlayed);\n    }\n    setProgress(100 * perc);\n    if (playing) {\n      playAudio();\n    }\n  };\n\n  return {\n    loading,\n    playing,\n    duration,\n    tempo,\n    pitch,\n    semitone,\n    volume,\n    playHead,\n    progress,\n    loadFile,\n    play: playAudio,\n    pause: pauseAudio,\n    changeVolume: ({ target: { value } }) => {\n      setVolume(value);\n      gainNode.gain.volume = value;\n    },\n    changeSemitone: ({ target: { value } }) => {\n      setSemitone(value);\n      if (shifter) {\n        shifter.pitchSemitones = value;\n      }\n    },\n    changePitch: ({ target: { value } }) => {\n      setPitch(value);\n      if (shifter) {\n        shifter.pitch = value;\n      }\n    },\n    changeTempo: ({ target: { value } }) => {\n      setTempo(value);\n      if (shifter) {\n        shifter.tempo = value;\n      }\n    },\n    resetPlayHead,\n    shifter\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}